{\rtf1\ansi\ansicpg936\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0  \uc0\u55357 \u56550  System Architecture\
\
The core framework utilizes **dynamic library loading** to implement overall functionality in a modular and scalable way.  \
All modules inherit from the `mutexNode` base class, including:\
\
- `keyboard` \'97 Key detection and password handling module  \
- `Echo` \'97 Ultrasonic sensor and buzzer management module  \
- `finger` \'97 Fingerprint recognition module  \
- `camera` \'97 Camera capture and monitoring module  \
- `serial` \'97 Serial communication module\
\
\
 \uc0\u55357 \u56577  Event & Callback System\
\
Callbacks are used both in the main runtime framework and within each module.\
\
Each module registers its internal events via the `eventInterface`. These events are monitored using the `hasEvent` method. When an event is detected (e.g., GPIO input, serial data reception, ultrasonic distance measurement), a corresponding callback is triggered to handle the logic.\
\
For example:\
- A GPIO pin detects a key press\
- A fingerprint is recognized\
- An object is detected nearby via ultrasonic\
\
Once data is captured, the `eventLoop` method of `mutexNode` is called, which sequentially invokes the `hasEventCallback` interface of each module to handle events accordingly.\
\
 \uc0\u55357 \u56580  Cross-Module Interaction\
\
- The `keyboard` module detects a button press and triggers a fingerprint check via the `finger` module.\
- When the ultrasonic sensor detects that an object is too close, it forwards the event through `eventLoop` to the `camera` module.\
- The `camera` module then notifies the Qt-based UI to save the current frame for security monitoring.\
\
\
\uc0\u55357 \u57056 \u65039  Download & Installation\
\
```bash\
git clone https://github.com/Peink/Team12-Real-Time-Embedded-Programming-2024-25.git\
\
sudo make depends     # Download dependencies  \
sudo make arm         # Compile for ARM architecture  \
sudo make install     # Install the compiled binaries  \
sudo make run         # Run the main system\
```\
\
> \uc0\u9888 \u65039  `aiView` must be started manually:  \
> Navigate to `~/aiView/build/` and run `./aiView.exe`\
\
---\
\
 \uc0\u10060  Uninstallation\
\
```bash\
sudo make clean       # Remove all build files\
```\
\
---\
\
\uc0\u55357 \u56960  Features\
\
- **Lock-free architecture** \'97 No thread mutex, enabling safe concurrency  \
- **Real-time video surveillance & anti-intrusion alerts**  \
- **Modular, decoupled build & runtime framework** \'97 Easy to scale and maintain  \
- **Dynamic library system** \'97 Enables hot-swappable updates and simplified integration  \
}